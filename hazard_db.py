from canonical_seqs import canon_seq
from Bio.Seq import Seq
from hashlib import sha256

SEQ_WINDOW = 42
AMINO_WINDOW = 14

def split_into_windows(seq, size):
    def split_into_windows_g(seq, size):
        for i in range(len(seq) - size + 1):
            yield seq[i:i+size]
    return list(split_into_windows_g(seq, size))

M13 = (
'gtgaaaaaattattattcgcaattcctttagttgttcctttctattctcactccgctgaaactgttgaaagttgtttagc'
'aaaaccccatacagaaaattcatttactaacgtctggaaagacgacaaaactttagatcgttacgctaactatgagggt'
'tgtctgtggaatgctacaggcgttgtagtttgtactggtgacgaaactcagtgttacggtacatgggttcctattgggc'
'ttgctatccctgaaaatgagggtggtggctctgagggtggcggttctgagggtggcggttctgagggtggcggtactaa'
'acctcctgagtacggtgatacacctattccgggctatacttatatcaaccctctcgacggcacttatccgcctggtact'
'gagcaaaaccccgctaatcctaatccttctcttgaggagtctcagcctcttaatactttcatgtttcagaataataggt'
'tccgaaataggcagggggcattaactgtttatacgggcactgttactcaaggcactgaccccgttaaaacttattacca'
'gtacactcctgtatcatcaaaagccatgtatgacgcttactggaacggtaaattcagagactgcgctttccattctggc'
'tttaatgaggatccattcgtttgtgaatatcaaggccaatcgtctgacctgcctcaacctcctgtcaatgctggcggcg'
'gctctggtggtggttctggtggcggctctgagggtggtggctctgagggtggcggttctgagggtggcggctctgaggg'
'aggcggttccggtggtggctctggttccggtgattttgattatgaaaagatggcaaacgctaataagggggctatgacc'
'gaaaatgccgatgaaaacgcgctacagtctgacgctaaaggcaaacttgattctgtcgctactgattacggtgctgcta'
'tcgatggtttcattggtgacgtttccggccttgctaatggtaatggtgctactggtgattttgctggctctaattccca'
'aatggctcaagtcggtgacggtgataattcacctttaatgaataatttccgtcaatatttaccttccctccctcaatcg'
'gttgaatgtcgcccttttgtctttagcgctggtaaaccatatgaattttctattgattgtgacaaaataaacttattcc'
'gtggtgtctttgcgtttcttttatatgttgccacctttatgtatgtattttctacgtttgctaacatactgcgtaataa'
'ggagtcttaatcatgccagttcttttgggtattccgttattattgcgtttcctcggtttccttctggtaactttgttcg'
'gctatctgcttacttttcttaaaaagggcttcggtaagatagctattgctatttcattgtttcttgctcttattattgg'
'gcttaactcaattcttgtgggttatctctctgatattagcgctcaattaccctctgactttgttcagggtgttcagtta'
'attctcccgtctaatgcgcttccctgtttttatgttattctctctgtaaaggctgctattttcatttttgacgttaaac'
'aaaaaatcgtttcttatttggattgggataaataatatggctgtttattttgtaactggcaaattaggctctggaaaga'
'cgctcgttagcgttggtaagattcaggataaaattgtagctgggtgcaaaatagcaactaatcttgatttaaggcttca'
'aaacctcccgcaagtcgggaggttcgctaaaacgcctcgcgttcttagaataccggataagccttctatatctgatttg'
'cttgctattgggcgcggtaatgattcctacgatgaaaataaaaacggcttgcttgttctcgatgagtgcggtacttggt'
'ttaatacccgttcttggaatgataaggaaagacagccgattattgattggtttctacatgctcgtaaattaggatggga'
'tattatttttcttgttcaggacttatctattgttgataaacaggcgcgttctgcattagctgaacatgttgtttattgt'
'cgtcgtctggacagaattactttaccttttgtcggtactttatattctcttattactggctcgaaaatgcctctgccta'
'aattacatgttggcgttgttaaatatggcgattctcaattaagccctactgttgagcgttggctttatactggtaagaa'
'tttgtataacgcatatgatactaaacaggctttttctagtaattatgattccggtgtttattcttatttaacgccttat'
'ttatcacacggtcggtatttcaaaccattaaatttaggtcagaagatgaaattaactaaaatatatttgaaaaagtttt'
'ctcgcgttctttgtcttgcgattggatttgcatcagcatttacatatagttatataacccaacctaagccggaggttaa'
'aaaggtagtctctcagacctatgattttgataaattcactattgactcttctcagcgtcttaatctaagctatcgctat'
'gttttcaaggattctaagggaaaattaattaatagcgacgatttacagaagcaaggttattcactcacatatattgatt'
'tatgtactgtttccattaaaaaaggtaattcaaatgaaattgttaaatgtaattaattttgttttcttgatgtttgttt'
'catcatcttcttttgctcaggtaattgaaatgaataattcgcctctgcgcgattttgtaacttggtattcaaagcaatc'
'aggcgaatccgttattgtttctcccgatgtaaaaggtactgttactgtatattcatctgacgttaaacctgaaaatcta'
'cgcaatttctttatttctgttttacgtgctaataattttgatatggttggttcaattccttccataattcagaagtata'
'atccaaacaatcaggattatattgatgaattgccatcatctgataatcaggaatatgatgataattccgctccttctgg'
'tggtttctttgttccgcaaaatgataatgttactcaaacttttaaaattaataacgttcgggcaaaggatttaatacga'
'gttgtcgaattgtttgtaaagtctaatacttctaaatcctcaaatgtattatctattgacggctctaatctattagttg'
'ttagtgcacctaaagatattttagataaccttcctcaattcctttctactgttgatttgccaactgaccagatattgat'
'tgagggtttgatatttgaggttcagcaaggtgatgctttagatttttcatttgctgctggctctcagcgtggcactgtt'
'gcaggcggtgttaatactgaccgcctcacctctgttttatcttctgctggtggttcgttcggtatttttaatggcgatg'
'ttttagggctatcagttcgcgcattaaagactaatagccattcaaaaatattgtctgtgccacgtattcttacgctttc'
'aggtcagaagggttctatctctgttggccagaatgtcccttttattactggtcgtgtgactggtgaatctgccaatgta'
'aataatccatttcagacgattgagcgtcaaaatgtaggtatttccatgagcgtttttcctgttgcaatggctggcggta'
'atattgttctggatattaccagcaaggccgatagtttgagttcttctactcaggcaagtgatgttattactaatcaaag'
'aagtattgctacaacggttaatttgcgtgatggacagactcttttactcggtggcctcactgattataaaaacacttct'
'caagattctggcgtaccgttcctgtctaaaatccctttaatcggcctcctgtttagctcccgctctgattccaacgagg'
'aaagcacgttatacgtgctcgtcaaagcaaccatagtacgcgccctgtagcggcgcattaagcgcggcgggtgtggtgg'
'ttacgcgcagcgtgaccgctacacttgccagcgccctagcgcccgctcctttcgctttcttcccttcctttctcgccac'
'gttcgccggctttccccgtcaagctctaaatcgggggctccctttagggttccgatttagtgctttacggcacctcgac'
'cccaaaaaacttgatttgggtgatggttcacgtagtgggccatcgccctgatagacggtttttcgccctttgacgttgg'
'agtccacgttctttaatagtggactcttgttccaaactggaacaacactcaaccctatctcgggctattcttttgattt'
'ataagggattttgccgatttcggcctattggttaaaaaatgagctgatttaacaaaaatttaacgcgaattttaacaaa'
'atattaacgtttacaatttaaatatttgcttatacaatcttcctgtttttggggcttttctgattatcaaccggggtac'
'atatgattgacatgctagttttacgattaccgttcatcgattctcttgtttgctccagactctcaggcaatgacctgat'
'agcctttgtagacctctcaaaaatagctaccctctccggcatgaatttatcagctagaacggttgaatatcatattgat'
'ggtgatttgactgtctccggcctttctcacccttttgaatctttacctacacattactcaggcattgcatttaaaatat'
'atgagggttctaaaaatttttatccttgcgttgaaataaaggcttctcccgcaaaagtattacagggtcataatgtttt'
'tggtacaaccgatttagctttatgctctgaggctttattgcttaattttgctaattctttgccttgcctgtatgattta'
'ttggatgttaacgctactactattagtagaattgatgccaccttttcagctcgcgccccaaatgaaaatatagctaaac'
'aggttattgaccatttgcgaaatgtatctaatggtcaaactaaatctactcgttcgcagaattgggaatcaactgttac'
'atggaatgaaacttccagacaccgtactttagttgcatatttaaaacatgttgagctacagcaccagattcagcaatta'
'agctctaagccatccgcaaaaatgacctcttatcaaaaggagcaattaaaggtactctctaatcctgacctgttggagt'
'ttgcttccggtctggttcgctttgaagctcgaattaaaacgcgatatttgaagtctttcgggcttcctcttaatctttt'
'tgatgcaatccgctttgcttctgactataatagtcagggtaaagacctgatttttgatttatggtcattctcgttttct'
'gaactgtttaaagcatttgagggggattcaatgaatatttatgacgattccgcagtattggacgctatccagtctaaac'
'attttactattaccccctctggcaaaacttcttttgcaaaagcctctcgctattttggtttttatcgtcgtctggtaaa'
'cgagggttatgatagtgttgctcttactatgcctcgtaattccttttggcgttatgtatctgcattagttgaatgtggt'
'attcctaaatctcaactgatgaatctttctacctgtaataatgttgttccgttagttcgttttattaacgtagattttt'
'cttcccaacgtcctgactggtataatgagccagttcttaaaatcgcataaggtaattcacaatgattaaagttgaaatt'
'aaaccatctcaagcccaatttactactcgttctggtgtttctcgtcagggcaagccttattcactgaatgagcagcttt'
'gttacgttgatttgggtaatgaatatccggttcttgtcaagattactcttgatgaaggtcagccagcctatgcgcctgg'
'tctgtacaccgttcatctgtcctctttcaaagttggtcagttcggttcccttatgattgaccgtctgcgcctcgttccg'
'gctaagtaacatggagcaggtcgcggatttcgacacaatttatcaggcgatgatacaaatctccgttgtactttgtttc'
'gcgcttggtataatcgctgggggtcaaagatgagtgttttagtgtattctttcgcctctttcgttttaggttggtgcct'
'tcgtagtggcattacgtattttacccgtttaatggaaacttcctcatgaaaaagtctttagtcctcaaagcctctgtag'
'ccgttgctaccctcgttccgatgctgtctttcgctgctgagggtgacgatcccgcaaaagcggcctttaactccctgca'
'agcctcagcgaccgaatatatcggttatgcgtgggcgatggttgttgtcattgtcggcgcaactatcggtatcaagctg'
'tttaagaaattcacctcgaaagcaagctgataaaccgatacaattaaaggctccttttggagcctttttttttggagat'
'tttcaac')

def hazard_db_hash(seq):
    return sha256(seq.encode('ascii')).hexdigest()

hazard_simple_db = set()

def add_to_simple_db(seq):
    for seq_window in split_into_windows(seq, SEQ_WINDOW):
        hazard_simple_db.add(hazard_db_hash(canon_seq(seq_window)))
    for aa_window in split_into_windows(seq, AMINO_WINDOW*3):
        translation = str(Seq(aa_window).translate())
        hazard_simple_db.add(hazard_db_hash(translation))

add_to_simple_db(M13)

